
create user 'kodilla_user' identified with MYSQL_NATIVE_PASSWORD by 'kodilla_Pass123';

GRANT ALL PRIVILEGES ON kodilla_course.* to kodilla_user;

CREATE TABLE USERS
(
    ID SERIAL PRIMARY KEY,
    FIRSTNAME VARCHAR(100),
    LASTNAME VARCHAR(100)
);

CREATE TABLE POSTS
(
    ID SERIAL PRIMARY KEY,
    USER_ID BIGINT UNSIGNED NOT NULL,
    BODY VARCHAR(1024),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

INSERT INTO POSTS (USER_ID, BODY)
VALUES (1, "Quite good, thanks bro!");

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ("John", "Smith");

INSERT INTO POSTS (USER_ID, BODY)
VALUES (1, "This is my first post on this forum!");


SELECT * FROM POSTS;

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ("Zachary", "Lee");

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ("Stephanie", "Kovalsky");

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ("Thomas", "Landgren");

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ("John", "Thomson");

INSERT INTO POSTS (USER_ID, BODY)
VALUES (2, "This is my first post too!");

INSERT INTO POSTS (USER_ID, BODY)
VALUES (2, "How are you?");

INSERT INTO POSTS (USER_ID, BODY)
VALUES (1, "Quite good, thanks bro!");

INSERT INTO POSTS (USER_ID, BODY)
VALUES (4, "Yo all! Here is Thomas!");


/* MODUŁ 16.3 ZADANIE  */

CREATE TABLE ISSUESLIST (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(100)
);

CREATE TABLE ISSUES (
                       ID SERIAL PRIMARY KEY,
                       ISSUESLIST_ID BIGINT UNSIGNED,
                       SUMMARY VARCHAR(100),
                       DESCRIPTION VARCHAR(1000),
                       USER_ID_ASSIGNEDTO BIGINT UNSIGNED,
                       FOREIGN KEY (ISSUESLIST_ID) REFERENCES ISSUESLIST (ID),
                       FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS (ID)
);

INSERT INTO ISSUESLIST (ID, NAME)
    VALUES (1, "ToDo");

INSERT INTO ISSUESLIST (ID, NAME)
VALUES (2, "In progress");

INSERT INTO ISSUESLIST (ID, NAME)
VALUES (3, "Done");

ShOW TABLES

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, "Task 1", "Description 1", 2);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, "Task 2", "Description 2", 1);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, "Task_3", "Description_3", 3);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, "Task_4", "Descripton_4", 4);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, "Task_5", "Descripton_5", 5);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, "Task_1", "Description_1", 1);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, "Task_2", "Descripton_2", 2);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, "Task_3", "Description_3", 3);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, "Task_4", "Descripton_4", 4);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, "Task_5", "Descripton_5", 5);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, "Task_1", "Description_1", 1);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, "Task_2", "Descripton_2", 2);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, "Task_3", "Description_3", 3);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, "Task_4", "Descripton_4", 4);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, "Task_5", "Descripton_5", 5);

COMMIT;

SELECT FROM ISSUES;

SELECT ID, FIRSTNAME FROM USERS
WHERE (ID >= 4 AND ID <= 10)
   OR ID = 1;

SELECT COUNT(*) FROM USERS;

SELECT SUM(ID) AS TOTAL, AVG(ID) AS AVERAGE FROM USERS;

SELECT U.FIRSTNAME, U.LASTNAME, P.BODY
FROM USERS U
         JOIN POSTS P ON U.ID = P.USER_ID;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS POSTS_NUMBER
FROM USERS U JOIN POSTS P ON U.ID = P.USER_ID
GROUP BY P.USER_ID
HAVING COUNT(*) > 1;

/* MODUŁ 16.4 ZADANIE  */

SELECT I.SUMMARY, I.DESCRIPTION, I.ISSUESLIST_ID, L.NAME AS STATUS
    FROM ISSUES I JOIN ISSUESLIST L ON I.ISSUESLIST_ID = L.ID
    ORDER BY STATUS;

SELECT I.SUMMARY, I.USER_ID_ASSIGNEDTO AS USERID, U.FIRSTNAME, U.LASTNAME
FROM ISSUES I JOIN USERS U ON I.USER_ID_ASSIGNEDTO = U.ID
ORDER BY USERID;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS TASKS_NUMBER
    FROM USERS U JOIN ISSUES I ON U.ID = I.USER_ID_ASSIGNEDTO
    GROUP BY U.FIRSTNAME, U.LASTNAME
    HAVING COUNT(*) >= 1;